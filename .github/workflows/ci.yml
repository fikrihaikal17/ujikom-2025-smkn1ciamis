name: Laravel CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.3]
        node-version: [18, 20]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7.0
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, redis
        coverage: pcov

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Install NPM dependencies
      run: npm ci

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Create SQLite database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Set database environment
      run: |
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=${{ github.workspace }}/database/database.sqlite" >> .env

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Build frontend assets
      run: npm run build

    - name: Run PHP CS Fixer
      run: vendor/bin/pint --test

    - name: Run ESLint
      run: npm run lint

    - name: Run tests
      run: php artisan test --coverage --coverage-clover=coverage.xml
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ":memory:"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run security audit
      run: composer audit

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install NPM dependencies
      run: npm ci

    - name: Run NPM audit
      run: npm audit --audit-level=high

  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install dependencies
      run: |
        composer install --optimize-autoloader --no-dev
        npm ci

    - name: Build assets
      run: npm run production

    - name: Deploy to staging
      run: |
        echo "Deployment would happen here"
        # Add your deployment steps here
        # Example: rsync, ssh, docker build/push, etc.