#!/usr/bin/env php
<?php

/**
 * Minimal Artisan Console untuk Laravel 12 - Ujikom 2025
 * Dibuat untuk mengatasi masalah dependency yang belum ter-install
 */

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__ . '/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
$app = require_once __DIR__ . '/bootstrap/app.php';

// Basic artisan commands
$commands = [
  'serve' => function () {
    echo "Laravel development server started: http://127.0.0.1:8000\n";
    echo "Press Ctrl+C to stop\n\n";
    passthru('php -S 127.0.0.1:8000 -t public');
  },
  'key:generate' => function () {
    $key = 'base64:' . base64_encode(random_bytes(32));

    // Update .env file
    $envPath = __DIR__ . '/.env';
    if (file_exists($envPath)) {
      $envContent = file_get_contents($envPath);
      if (strpos($envContent, 'APP_KEY=') !== false) {
        $envContent = preg_replace('/APP_KEY=.*/', "APP_KEY=$key", $envContent);
      } else {
        $envContent .= "\nAPP_KEY=$key\n";
      }
      file_put_contents($envPath, $envContent);
      echo "Application key set successfully.\n";
    } else {
      echo "Error: .env file not found.\n";
    }
  },
  'storage:link' => function () {
    $publicPath = __DIR__ . '/public/storage';
    $storagePath = __DIR__ . '/storage/app/public';

    if (file_exists($publicPath)) {
      unlink($publicPath);
    }

    if (PHP_OS_FAMILY === 'Windows') {
      $cmd = "mklink /D \"$publicPath\" \"$storagePath\"";
    } else {
      $cmd = "ln -sf \"$storagePath\" \"$publicPath\"";
    }

    if (system($cmd) !== false) {
      echo "The [public/storage] directory has been linked.\n";
    } else {
      echo "Failed to create storage link.\n";
    }
  },
  'migrate' => function () {
    echo "Running database migrations...\n";

    // Basic migration simulation
    $migrations = [
      'create_users_table',
      'create_password_reset_tokens_table',
      'create_sessions_table'
    ];

    foreach ($migrations as $migration) {
      echo "Migrating: $migration\n";
      // In real implementation, this would run actual SQL
      sleep(1);
    }

    echo "Migrations completed successfully.\n";
  },
  '--version' => function () {
    echo "Laravel Framework 12.0 (Minimal)\n";
    echo "Ujikom 2025 Edition\n";
  },
  'help' => function () {
    echo "Available commands:\n";
    echo "  serve              Start the development server\n";
    echo "  key:generate       Generate application key\n";
    echo "  storage:link       Create storage symbolic link\n";
    echo "  migrate           Run database migrations\n";
    echo "  --version         Show Laravel version\n";
    echo "  help              Show this help message\n";
  }
];

// Get command from arguments
$command = isset($argv[1]) ? $argv[1] : 'help';

// Execute command
if (isset($commands[$command])) {
  $commands[$command]();
} else {
  echo "Command '$command' not found.\n";
  echo "Run 'php artisan help' to see available commands.\n";
}
